buildscript {
	ext {
		springBootVersion = '1.3.0.RELEASE'
		dependencyManagementVersion = '0.6.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
    jcenter()
    maven {
        url 'https://repo.spring.io/libs-release'
    }
}

configurations {
	liquibase
}


dependencies {

	liquibase 'org.liquibase:liquibase-core:3.3.2'
	liquibase 'org.postgresql:postgresql:9.4-1201-jdbc41'


	compile('org.postgresql:postgresql:9.4-1201-jdbc41')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')

	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile("org.springframework:spring-jdbc")

	compile("org.springframework.boot:spring-boot-starter-jetty")

	compile("org.springframework.boot:spring-boot-starter-security")
	compile("org.springframework.boot:spring-boot-starter-redis")
	compile('org.springframework.session:spring-session:1.0.2.RELEASE')
	compile('org.apache.commons:commons-lang3:3.0')
	compile('io.springfox:springfox-swagger-ui:2.8.0')
	compile('io.springfox:springfox-swagger2:2.8.0')

	compile('com.google.guava:guava:18.0')
	compile('javax.ws.rs:javax.ws.rs-api:2.0.1')
	compile('org.json:json:20150729')


	runtime('org.postgresql:postgresql')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}

// Liquibase Tasks
def updateDatabase = {writeToOutputFile ->
	final changelogFile = new File("$projectDir/src/main/resources/liquibase.xml")
	final newChangelogFile = File.createTempFile('changelog-', '.xml')

	newChangelogFile.withWriter { w ->
		changelogFile.eachLine { line ->
			w << line.replace('$projectDir', "$projectDir")
		}
	}

	final params = [
			changeLogFile: newChangelogFile.path,
			promptOnNonLocalDatabase: 'false',
			dropFirst: 'false',
			classpathref: 'classpath']

	if (writeToOutputFile) {
		params.outputFile = "$buildDir/migrations.sql"
	}

	final updateDatabaseAntTask = ant.updateDatabase(params) {
		database(
				driver: 'org.postgresql.Driver',
				url: System.getProperty('url'),
				user: System.getProperty('user'),
				password: System.getProperty('password')
		)
	}
}

task update {
	ant.path(id: 'classpath') {
		ant.pathelement(path: configurations.liquibase.asPath)
	}

	ant.taskdef(resource: 'liquibasetasks.properties', classpathref: 'classpath')
}

update << {
	updateDatabase(false)
}

task updateSQL << {
	updateDatabase(true)
}
